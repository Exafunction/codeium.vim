*codeium.txt*  Codeium

GETTING STARTED                                 *codeium*

Run the `:Codeium Auth` command to login to Codeium. This is required to
enable the plugin.

Once logged in, suggested completions will be displayed inline as virtual
text. You can insert a completion by pressing <Tab>.

COMMANDS                                        *:Codeium*

                                                *:Codeium_Auth*
:Codeium Auth           Authenticate to Codeium.

                                                *:Codeium_Disable*
:Codeium Disable        Disable Codeium completions

                                                *:Codeium_Enable*
:Codeium Enable         Re-enable Codeium completions after running :Codeium Disable

                                                *:Codeium_DisableBuffer*
:Codeium DisableBuffer  Disable Codeium completions in the current buffer only.

                                                *:Codeium_EnableBuffer*
:Codeium EnableBuffer   Re-enable Codeium completions in the current
                        buffer after running :Codeium DisableBuffer


OPTIONS                                         *codeium-options*

                                                *g:codeium_filetypes*
g:codeium_filetypes     A dictionary mapping whether codeium should be
                        enabled or disabled in certain filetypes. This can
                        be used to opt out of completions for certain filetypes.
>
                        let g:codeium_filetypes = {
                              \ 'bash': v:false,
                              \ 'typescript': v:true,
                              \ }
<

                                                *g:codeium_enabled*
g:codeium_enabled       A global boolean flag that controls whether codeium
                        completions are enabled or disabled by default.
>
                        let g:codeium_enabled = v:true
<

                                                *g:codeium_manual*
g:codeium_manual        If true, codeium completions will never automatically
                        trigger.
>
                        let g:codeium_manual = v:true
<

                                                *g:codeium_no_map_tab*
g:codeium_no_map_tab    A global boolean flag that controls whether codeium
                        uses <TAB> for the mapping codeium#Accept
>
                        let g:codeium_no_map_tab = v:true
<

                                                *g:codeium_idle_delay*
g:codeium_idle_delay    Delay in milliseconds before autocompletions are
                        shown (limited by language server to a minimum of 75).
>
                        let g:codeium_idle_delay = 500
<
                                                *g:codeium_render*
g:codeium_render        A global boolean flag that controls whether codeium
                        renders are enabled or disabled.
>
                        let g:codeium_render = v:false
<

                                                *g:codeium_tab_fallback*
g:codeium_tab_fallback  The fallback key when there is no suggestion display
                        in `codeium#Accept()`.
>
                        let g:codeium_tab_fallback = "\t"
<

MAPS                                            *codeium-maps*

                                                *codeium-i_<Tab>*
Codeium.vim defaults to using the <Tab> key to insert the current
suggestion. If there is no suggestion display, the <Tab> key will fallback
to any existing <Tab> mapping you have. This is bound to `codeium#Accept()`

Other Maps ~

                                                *codeium-i_CTRL-]*
<C-]>                   Dismiss the current suggestion.
<Plug>(codeium-dismiss)
<Cmd>call codeium#Clear()<CR>

                                                *codeium-i_ALT-]*
<M-]>                   Cycle to the next suggestion.
<Plug>(codeium-next)
<Cmd>call codeium#CycleCompletions(1)<CR>

                                                *codeium-i_ALT-[*
<M-[>                   Cycle to the previous suggestion.
<Plug>(codeium-previous)
<Cmd>call codeium#CycleCompletions(-1)<CR>

SYNTAX HIGHLIGHTING                             *codeium-highlighting*

Inline suggestions are highlighted using the CodeiumSuggestion group,
which defaults to a gray color. You can configure this highlight group for
your colorscheme in after/colors/<colorschemename>.vim in your
'runtimepath' (e.g., ~/.config/nvim/after/colors/solarized.vim).  Example
declaration:
>
        highlight CodeiumSuggestion guifg=#555555 ctermfg=8
<
 vim:tw=78:et:ft=help:norl:
